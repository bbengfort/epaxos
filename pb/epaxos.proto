// ePaxos RPC message types
syntax = "proto3";
package pb;

// Instance status flags
enum Status {
    INITIAL = 0;      // the instance has been initialized, but not pre-accepted
    PREACCEPTED = 1;  // the instance has been pre-accepted, but a conflict requires an accept
    ACCEPTED = 2;     // the instance has been accepted, awaiting commit
    COMMITTED = 3;    // the instance has been committed, awaiting execution
    EXECUTED = 4;     // the instance has been executed on the replica
}

// Operation access types
enum AccessType {
    NULL = 0;        // for no-op operations
    READ = 1;        // also "GET"
    WRITE = 2;       // also "PUT"
    WRITEREAD = 3;   // write waits for read before returning
    DELETE = 4;      // also "DEL"
    PAUSE = 5;       // slows down writes by executing a sleep for specified duration
}

// An Instance is a log record for a specific replica that contains operations that
// will be applied to the key-value store. Instances are the atomic unit of consensus.
message Instance {
    int64 replica = 1;             // the replica the instance originated at
    int64 slot = 2;                // index of the replica's log the instance is placed
    int64 seq = 3;                 // sequence number for applying commands
    repeated int64 deps = 4;       // dependencies for each position in all other replica logs
    Status status = 5;             // the status of consensus for this instance
    int32 acks = 6;                // number of replies from replicas for the given status
    bool changed = 7;              // if a remote replica has updated the instance
    bool reads = 8;                // if the instance contains any read operations (blocking)
    int64 visited = 9;             // mark visited during graph traversal for execution
    repeated Operation ops = 10;   // the operations to be applied by this instance
}

// An operation is a command that will be applied to the key-value store.
message Operation {
    AccessType type = 1;           // the access type of the operation
    string key = 2;                // the name of the key to execute the access of
    bytes value = 3;               // the data associated with the access
    int64 request = 4;             // index of the client request for the leader to respond
}

// Send a preaccept request from leader to remote peers for the given instance.
message PreacceptRequest {
    Instance inst = 1;             // the instance to add to the leader's log and check conflicts for
}

// Reply with the preaccept status and if any conflicts are detected.
message PreacceptReply {
    int64 slot = 1;               // the slot of the instance being pre-accepted (for retrieval from the log at the leader)
    int64 seq = 2;                // the maximal sequence value of the remote for sequence resolution
    repeated int64 deps = 3;      // dependencies found at the remote peer
    bool changed =4;              // whether the sequence or dependencies have changed indicating a conflict
}

// If there was a conflict send an accept request from leader to remote peers.
message AcceptRequest {
    Instance inst = 1;            // the instance to accept after conflict resolution
}

// Reply with accept status
message AcceptReply {
    int64 slot = 1;               // the slot of the instance being accepted (for retrieval from the log at the leader)
}

// Alert all peers that the specified instance has been committed.
message CommitRequest {
    Instance inst = 1;            // the instance to commit
}

// Peers can ack their commit, but in practice this message is not needed/used.
message CommitReply {
    int64 slot = 1;               // the slot of the instance being committed (for retrieval from the log at the leader)
}

// Beacon messages are used to establish links and send local state to the remote as a
// state-checking heartbeat to ensure consensus is working properly.
message BeaconRequest {
    bool quorumMember = 1;        // if the replica is part of the quorum (usually true)
    int64 replica = 2;            // the replica id for log purposes
    repeated int64 slots = 3;     // the current log index for each replica
    repeated int64 commits = 4;   // the current commit index for each replica
}

message BeaconReply {
    bool quorumMember = 1;        // if the replica is part of the quorum (usually true)
    int64 replica = 2;            // the replica id for log purposes
    repeated int64 slots = 3;     // the current log index for each replica
    repeated int64 commits = 4;   // the current commit index for each replica
}
