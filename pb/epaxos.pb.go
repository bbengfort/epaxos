// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epaxos.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Instance status flags
type Status int32

const (
	Status_INITIAL     Status = 0
	Status_PREACCEPTED Status = 1
	Status_ACCEPTED    Status = 2
	Status_COMMITTED   Status = 3
	Status_EXECUTED    Status = 4
)

var Status_name = map[int32]string{
	0: "INITIAL",
	1: "PREACCEPTED",
	2: "ACCEPTED",
	3: "COMMITTED",
	4: "EXECUTED",
}

var Status_value = map[string]int32{
	"INITIAL":     0,
	"PREACCEPTED": 1,
	"ACCEPTED":    2,
	"COMMITTED":   3,
	"EXECUTED":    4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{0}
}

// Operation access types
type AccessType int32

const (
	AccessType_NULL      AccessType = 0
	AccessType_READ      AccessType = 1
	AccessType_WRITE     AccessType = 2
	AccessType_WRITEREAD AccessType = 3
	AccessType_DELETE    AccessType = 4
	AccessType_PAUSE     AccessType = 5
)

var AccessType_name = map[int32]string{
	0: "NULL",
	1: "READ",
	2: "WRITE",
	3: "WRITEREAD",
	4: "DELETE",
	5: "PAUSE",
}

var AccessType_value = map[string]int32{
	"NULL":      0,
	"READ":      1,
	"WRITE":     2,
	"WRITEREAD": 3,
	"DELETE":    4,
	"PAUSE":     5,
}

func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}

func (AccessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{1}
}

// An Instance is a log record for a specific replica that contains operations that
// will be applied to the key-value store. Instances are the atomic unit of consensus.
type Instance struct {
	Replica              int64        `protobuf:"varint,1,opt,name=replica,proto3" json:"replica,omitempty"`
	Slot                 int64        `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Seq                  int64        `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Deps                 []int64      `protobuf:"varint,4,rep,packed,name=deps,proto3" json:"deps,omitempty"`
	Status               Status       `protobuf:"varint,5,opt,name=status,proto3,enum=pb.Status" json:"status,omitempty"`
	Acks                 int32        `protobuf:"varint,6,opt,name=acks,proto3" json:"acks,omitempty"`
	Changed              bool         `protobuf:"varint,7,opt,name=changed,proto3" json:"changed,omitempty"`
	Reads                bool         `protobuf:"varint,8,opt,name=reads,proto3" json:"reads,omitempty"`
	Visited              int64        `protobuf:"varint,9,opt,name=visited,proto3" json:"visited,omitempty"`
	Ops                  []*Operation `protobuf:"bytes,10,rep,name=ops,proto3" json:"ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{0}
}

func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (m *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(m, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetReplica() int64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *Instance) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Instance) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Instance) GetDeps() []int64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *Instance) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_INITIAL
}

func (m *Instance) GetAcks() int32 {
	if m != nil {
		return m.Acks
	}
	return 0
}

func (m *Instance) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

func (m *Instance) GetReads() bool {
	if m != nil {
		return m.Reads
	}
	return false
}

func (m *Instance) GetVisited() int64 {
	if m != nil {
		return m.Visited
	}
	return 0
}

func (m *Instance) GetOps() []*Operation {
	if m != nil {
		return m.Ops
	}
	return nil
}

// An operation is a command that will be applied to the key-value store.
type Operation struct {
	Type                 AccessType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.AccessType" json:"type,omitempty"`
	Key                  string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Request              int64      `protobuf:"varint,4,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{1}
}

func (m *Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operation.Unmarshal(m, b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return xxx_messageInfo_Operation.Size(m)
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetType() AccessType {
	if m != nil {
		return m.Type
	}
	return AccessType_NULL
}

func (m *Operation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Operation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation) GetRequest() int64 {
	if m != nil {
		return m.Request
	}
	return 0
}

// Send a preaccept request from leader to remote peers for the given instance.
type PreacceptRequest struct {
	Inst                 *Instance `protobuf:"bytes,1,opt,name=inst,proto3" json:"inst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PreacceptRequest) Reset()         { *m = PreacceptRequest{} }
func (m *PreacceptRequest) String() string { return proto.CompactTextString(m) }
func (*PreacceptRequest) ProtoMessage()    {}
func (*PreacceptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{2}
}

func (m *PreacceptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreacceptRequest.Unmarshal(m, b)
}
func (m *PreacceptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreacceptRequest.Marshal(b, m, deterministic)
}
func (m *PreacceptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreacceptRequest.Merge(m, src)
}
func (m *PreacceptRequest) XXX_Size() int {
	return xxx_messageInfo_PreacceptRequest.Size(m)
}
func (m *PreacceptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreacceptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreacceptRequest proto.InternalMessageInfo

func (m *PreacceptRequest) GetInst() *Instance {
	if m != nil {
		return m.Inst
	}
	return nil
}

// Reply with the preaccept status and if any conflicts are detected.
type PreacceptReply struct {
	Slot                 int64    `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Seq                  int64    `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Deps                 []int64  `protobuf:"varint,3,rep,packed,name=deps,proto3" json:"deps,omitempty"`
	Changed              bool     `protobuf:"varint,4,opt,name=changed,proto3" json:"changed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreacceptReply) Reset()         { *m = PreacceptReply{} }
func (m *PreacceptReply) String() string { return proto.CompactTextString(m) }
func (*PreacceptReply) ProtoMessage()    {}
func (*PreacceptReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{3}
}

func (m *PreacceptReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreacceptReply.Unmarshal(m, b)
}
func (m *PreacceptReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreacceptReply.Marshal(b, m, deterministic)
}
func (m *PreacceptReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreacceptReply.Merge(m, src)
}
func (m *PreacceptReply) XXX_Size() int {
	return xxx_messageInfo_PreacceptReply.Size(m)
}
func (m *PreacceptReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PreacceptReply.DiscardUnknown(m)
}

var xxx_messageInfo_PreacceptReply proto.InternalMessageInfo

func (m *PreacceptReply) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PreacceptReply) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreacceptReply) GetDeps() []int64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *PreacceptReply) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

// If there was a conflict send an accept request from leader to remote peers.
type AcceptRequest struct {
	Inst                 *Instance `protobuf:"bytes,1,opt,name=inst,proto3" json:"inst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AcceptRequest) Reset()         { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()    {}
func (*AcceptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{4}
}

func (m *AcceptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptRequest.Unmarshal(m, b)
}
func (m *AcceptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptRequest.Marshal(b, m, deterministic)
}
func (m *AcceptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptRequest.Merge(m, src)
}
func (m *AcceptRequest) XXX_Size() int {
	return xxx_messageInfo_AcceptRequest.Size(m)
}
func (m *AcceptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptRequest proto.InternalMessageInfo

func (m *AcceptRequest) GetInst() *Instance {
	if m != nil {
		return m.Inst
	}
	return nil
}

// Reply with accept status
type AcceptReply struct {
	Slot                 int64    `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptReply) Reset()         { *m = AcceptReply{} }
func (m *AcceptReply) String() string { return proto.CompactTextString(m) }
func (*AcceptReply) ProtoMessage()    {}
func (*AcceptReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{5}
}

func (m *AcceptReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptReply.Unmarshal(m, b)
}
func (m *AcceptReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptReply.Marshal(b, m, deterministic)
}
func (m *AcceptReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptReply.Merge(m, src)
}
func (m *AcceptReply) XXX_Size() int {
	return xxx_messageInfo_AcceptReply.Size(m)
}
func (m *AcceptReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptReply.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptReply proto.InternalMessageInfo

func (m *AcceptReply) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// Alert all peers that the specified instance has been committed.
type CommitRequest struct {
	Inst                 *Instance `protobuf:"bytes,1,opt,name=inst,proto3" json:"inst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{6}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetInst() *Instance {
	if m != nil {
		return m.Inst
	}
	return nil
}

// Peers can ack their commit, but in practice this message is not needed/used.
type CommitReply struct {
	Slot                 int64    `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitReply) Reset()         { *m = CommitReply{} }
func (m *CommitReply) String() string { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()    {}
func (*CommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{7}
}

func (m *CommitReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitReply.Unmarshal(m, b)
}
func (m *CommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitReply.Marshal(b, m, deterministic)
}
func (m *CommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitReply.Merge(m, src)
}
func (m *CommitReply) XXX_Size() int {
	return xxx_messageInfo_CommitReply.Size(m)
}
func (m *CommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommitReply proto.InternalMessageInfo

func (m *CommitReply) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// Beacon messages are used to establish links and send local state to the remote as a
// state-checking heartbeat to ensure consensus is working properly.
type BeaconRequest struct {
	QuorumMember         bool     `protobuf:"varint,1,opt,name=quorumMember,proto3" json:"quorumMember,omitempty"`
	Replica              int64    `protobuf:"varint,2,opt,name=replica,proto3" json:"replica,omitempty"`
	Slots                []int64  `protobuf:"varint,3,rep,packed,name=slots,proto3" json:"slots,omitempty"`
	Commits              []int64  `protobuf:"varint,4,rep,packed,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconRequest) Reset()         { *m = BeaconRequest{} }
func (m *BeaconRequest) String() string { return proto.CompactTextString(m) }
func (*BeaconRequest) ProtoMessage()    {}
func (*BeaconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{8}
}

func (m *BeaconRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconRequest.Unmarshal(m, b)
}
func (m *BeaconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconRequest.Marshal(b, m, deterministic)
}
func (m *BeaconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconRequest.Merge(m, src)
}
func (m *BeaconRequest) XXX_Size() int {
	return xxx_messageInfo_BeaconRequest.Size(m)
}
func (m *BeaconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconRequest proto.InternalMessageInfo

func (m *BeaconRequest) GetQuorumMember() bool {
	if m != nil {
		return m.QuorumMember
	}
	return false
}

func (m *BeaconRequest) GetReplica() int64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *BeaconRequest) GetSlots() []int64 {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *BeaconRequest) GetCommits() []int64 {
	if m != nil {
		return m.Commits
	}
	return nil
}

type BeaconReply struct {
	QuorumMember         bool     `protobuf:"varint,1,opt,name=quorumMember,proto3" json:"quorumMember,omitempty"`
	Replica              int64    `protobuf:"varint,2,opt,name=replica,proto3" json:"replica,omitempty"`
	Slots                []int64  `protobuf:"varint,3,rep,packed,name=slots,proto3" json:"slots,omitempty"`
	Commits              []int64  `protobuf:"varint,4,rep,packed,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconReply) Reset()         { *m = BeaconReply{} }
func (m *BeaconReply) String() string { return proto.CompactTextString(m) }
func (*BeaconReply) ProtoMessage()    {}
func (*BeaconReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89189ba059724a6, []int{9}
}

func (m *BeaconReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconReply.Unmarshal(m, b)
}
func (m *BeaconReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconReply.Marshal(b, m, deterministic)
}
func (m *BeaconReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconReply.Merge(m, src)
}
func (m *BeaconReply) XXX_Size() int {
	return xxx_messageInfo_BeaconReply.Size(m)
}
func (m *BeaconReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconReply.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconReply proto.InternalMessageInfo

func (m *BeaconReply) GetQuorumMember() bool {
	if m != nil {
		return m.QuorumMember
	}
	return false
}

func (m *BeaconReply) GetReplica() int64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *BeaconReply) GetSlots() []int64 {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *BeaconReply) GetCommits() []int64 {
	if m != nil {
		return m.Commits
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Status", Status_name, Status_value)
	proto.RegisterEnum("pb.AccessType", AccessType_name, AccessType_value)
	proto.RegisterType((*Instance)(nil), "pb.Instance")
	proto.RegisterType((*Operation)(nil), "pb.Operation")
	proto.RegisterType((*PreacceptRequest)(nil), "pb.PreacceptRequest")
	proto.RegisterType((*PreacceptReply)(nil), "pb.PreacceptReply")
	proto.RegisterType((*AcceptRequest)(nil), "pb.AcceptRequest")
	proto.RegisterType((*AcceptReply)(nil), "pb.AcceptReply")
	proto.RegisterType((*CommitRequest)(nil), "pb.CommitRequest")
	proto.RegisterType((*CommitReply)(nil), "pb.CommitReply")
	proto.RegisterType((*BeaconRequest)(nil), "pb.BeaconRequest")
	proto.RegisterType((*BeaconReply)(nil), "pb.BeaconReply")
}

func init() { proto.RegisterFile("epaxos.proto", fileDescriptor_a89189ba059724a6) }

var fileDescriptor_a89189ba059724a6 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4f, 0x6f, 0xda, 0x4e,
	0x10, 0xfd, 0xf9, 0x1f, 0x31, 0x63, 0xe0, 0x67, 0xad, 0x72, 0xd8, 0x5b, 0x5d, 0x9f, 0x50, 0x0e,
	0x91, 0x4a, 0xfb, 0x05, 0x5c, 0xe2, 0x83, 0x25, 0x48, 0xc8, 0xc6, 0xa8, 0xbd, 0x2e, 0x66, 0xd5,
	0x5a, 0x01, 0x7b, 0xf1, 0x2e, 0x51, 0x51, 0xd5, 0x43, 0xbf, 0x79, 0x35, 0xeb, 0x98, 0x82, 0xa2,
	0x56, 0xca, 0xa5, 0xb7, 0x79, 0x33, 0xb3, 0x6f, 0x1e, 0x6f, 0x06, 0xc3, 0x40, 0x48, 0xfe, 0xad,
	0x56, 0xd7, 0xb2, 0xa9, 0x75, 0x4d, 0x6c, 0xb9, 0x8a, 0x7f, 0xda, 0xe0, 0x67, 0x95, 0xd2, 0xbc,
	0x2a, 0x04, 0xa1, 0x70, 0xd1, 0x08, 0xb9, 0x29, 0x0b, 0x4e, 0xad, 0xc8, 0x1a, 0x3b, 0xac, 0x83,
	0x84, 0x80, 0xab, 0x36, 0xb5, 0xa6, 0xb6, 0x49, 0x9b, 0x98, 0x84, 0xe0, 0x28, 0xb1, 0xa3, 0x8e,
	0x49, 0x61, 0x88, 0x5d, 0x6b, 0x21, 0x15, 0x75, 0x23, 0x07, 0xbb, 0x30, 0x26, 0x31, 0xf4, 0x94,
	0xe6, 0x7a, 0xaf, 0xa8, 0x17, 0x59, 0xe3, 0xd1, 0x04, 0xae, 0xe5, 0xea, 0xfa, 0xc1, 0x64, 0xd8,
	0x73, 0x05, 0xdf, 0xf1, 0xe2, 0x51, 0xd1, 0x5e, 0x64, 0x8d, 0x3d, 0x66, 0x62, 0xd4, 0x52, 0x7c,
	0xe5, 0xd5, 0x17, 0xb1, 0xa6, 0x17, 0x91, 0x35, 0xf6, 0x59, 0x07, 0xc9, 0x25, 0x78, 0x8d, 0xe0,
	0x6b, 0x45, 0x7d, 0x93, 0x6f, 0x01, 0xf6, 0x3f, 0x95, 0xaa, 0xd4, 0x62, 0x4d, 0xfb, 0xad, 0xf6,
	0x67, 0x48, 0xde, 0x80, 0x53, 0x4b, 0x45, 0x21, 0x72, 0xc6, 0xc1, 0x64, 0x88, 0xe3, 0xef, 0xa4,
	0x68, 0xb8, 0x2e, 0xeb, 0x8a, 0x61, 0x25, 0xde, 0x41, 0xff, 0x98, 0x21, 0x31, 0xb8, 0xfa, 0x20,
	0x85, 0x31, 0x60, 0x34, 0x19, 0x61, 0x7b, 0x52, 0x14, 0x42, 0xa9, 0xfc, 0x20, 0x05, 0x33, 0x35,
	0xfc, 0xe5, 0x8f, 0xe2, 0x60, 0xcc, 0xe8, 0x33, 0x0c, 0x51, 0xd3, 0x13, 0xdf, 0xec, 0x85, 0x71,
	0x63, 0xc0, 0x5a, 0xd0, 0xfa, 0xb9, 0xdb, 0x0b, 0xa5, 0xa9, 0xdb, 0xf9, 0x69, 0x60, 0xfc, 0x01,
	0xc2, 0x45, 0x23, 0x78, 0x51, 0x08, 0xa9, 0x59, 0x9b, 0x23, 0x11, 0xb8, 0x65, 0xa5, 0xb4, 0x99,
	0x1c, 0x4c, 0x06, 0x38, 0xb9, 0xdb, 0x0c, 0x33, 0x95, 0x78, 0x0d, 0xa3, 0x93, 0x57, 0x72, 0x73,
	0x38, 0xee, 0xc5, 0x7a, 0xb9, 0x17, 0xfb, 0xe5, 0x5e, 0x9c, 0x93, 0xbd, 0x9c, 0xf8, 0xeb, 0x9e,
	0xf9, 0x1b, 0xbf, 0x83, 0x61, 0xf2, 0x4a, 0x61, 0x6f, 0x21, 0x48, 0xfe, 0xae, 0x0a, 0x59, 0xa7,
	0xf5, 0x76, 0x5b, 0xbe, 0x8e, 0xb5, 0x7b, 0xf2, 0x27, 0xd6, 0x1f, 0x30, 0xfc, 0x28, 0x78, 0x51,
	0x57, 0x1d, 0x6b, 0x0c, 0x83, 0xdd, 0xbe, 0x6e, 0xf6, 0xdb, 0xb9, 0xd8, 0xae, 0x44, 0x63, 0x9a,
	0x7d, 0x76, 0x96, 0x3b, 0x3d, 0x73, 0xfb, 0xfc, 0xcc, 0x2f, 0xc1, 0x43, 0xda, 0xce, 0xa9, 0x16,
	0x18, 0xab, 0x8c, 0x8e, 0xee, 0xb2, 0x3b, 0x18, 0x7f, 0x87, 0xa0, 0x1b, 0x8f, 0x0a, 0xff, 0xe9,
	0xf0, 0xab, 0x7b, 0xe8, 0xb5, 0xff, 0x23, 0x12, 0xc0, 0x45, 0x76, 0x9b, 0xe5, 0x59, 0x32, 0x0b,
	0xff, 0x23, 0xff, 0x43, 0xb0, 0x60, 0x69, 0x32, 0x9d, 0xa6, 0x8b, 0x3c, 0xbd, 0x09, 0x2d, 0x32,
	0x00, 0xff, 0x88, 0x6c, 0x32, 0x84, 0xfe, 0xf4, 0x6e, 0x3e, 0xcf, 0x72, 0x84, 0x0e, 0x16, 0xd3,
	0xcf, 0xe9, 0x74, 0x89, 0xc8, 0xbd, 0xba, 0x07, 0xf8, 0x7d, 0xec, 0xc4, 0x07, 0xf7, 0x76, 0x39,
	0x43, 0x4e, 0x1f, 0x5c, 0x96, 0x26, 0x48, 0xd6, 0x07, 0xef, 0x13, 0xcb, 0xf2, 0xb4, 0x65, 0x32,
	0xa1, 0xa9, 0x38, 0x04, 0xa0, 0x77, 0x93, 0xce, 0xd2, 0x3c, 0x0d, 0x5d, 0xec, 0x5a, 0x24, 0xcb,
	0x87, 0x34, 0xf4, 0x56, 0x3d, 0xf3, 0xad, 0x79, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x62, 0x5f,
	0x8a, 0x62, 0x7b, 0x04, 0x00, 0x00,
}
