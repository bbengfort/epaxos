// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Specifies the message type in a peer request and reply
type Type int32

const (
	Type_UNKNOWN   Type = 0
	Type_PREACCEPT Type = 1
	Type_ACCEPT    Type = 2
	Type_COMMIT    Type = 3
	Type_BEACON    Type = 4
)

var Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "PREACCEPT",
	2: "ACCEPT",
	3: "COMMIT",
	4: "BEACON",
}

var Type_value = map[string]int32{
	"UNKNOWN":   0,
	"PREACCEPT": 1,
	"ACCEPT":    2,
	"COMMIT":    3,
	"BEACON":    4,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{0}
}

// A wrapper message that can contain one of the request message types.
type PeerRequest struct {
	Type   Type   `protobuf:"varint,1,opt,name=type,proto3,enum=pb.Type" json:"type,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// only one of these fields can be set, and the field that is set should
	// match the message type described above.
	//
	// Types that are valid to be assigned to Message:
	//	*PeerRequest_Preaccept
	//	*PeerRequest_Accept
	//	*PeerRequest_Commit
	//	*PeerRequest_Beacon
	Message              isPeerRequest_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PeerRequest) Reset()         { *m = PeerRequest{} }
func (m *PeerRequest) String() string { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()    {}
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{0}
}

func (m *PeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRequest.Unmarshal(m, b)
}
func (m *PeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRequest.Marshal(b, m, deterministic)
}
func (m *PeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRequest.Merge(m, src)
}
func (m *PeerRequest) XXX_Size() int {
	return xxx_messageInfo_PeerRequest.Size(m)
}
func (m *PeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRequest proto.InternalMessageInfo

func (m *PeerRequest) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNKNOWN
}

func (m *PeerRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type isPeerRequest_Message interface {
	isPeerRequest_Message()
}

type PeerRequest_Preaccept struct {
	Preaccept *PreacceptRequest `protobuf:"bytes,11,opt,name=preaccept,proto3,oneof"`
}

type PeerRequest_Accept struct {
	Accept *AcceptRequest `protobuf:"bytes,12,opt,name=accept,proto3,oneof"`
}

type PeerRequest_Commit struct {
	Commit *CommitRequest `protobuf:"bytes,13,opt,name=commit,proto3,oneof"`
}

type PeerRequest_Beacon struct {
	Beacon *BeaconRequest `protobuf:"bytes,14,opt,name=beacon,proto3,oneof"`
}

func (*PeerRequest_Preaccept) isPeerRequest_Message() {}

func (*PeerRequest_Accept) isPeerRequest_Message() {}

func (*PeerRequest_Commit) isPeerRequest_Message() {}

func (*PeerRequest_Beacon) isPeerRequest_Message() {}

func (m *PeerRequest) GetMessage() isPeerRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PeerRequest) GetPreaccept() *PreacceptRequest {
	if x, ok := m.GetMessage().(*PeerRequest_Preaccept); ok {
		return x.Preaccept
	}
	return nil
}

func (m *PeerRequest) GetAccept() *AcceptRequest {
	if x, ok := m.GetMessage().(*PeerRequest_Accept); ok {
		return x.Accept
	}
	return nil
}

func (m *PeerRequest) GetCommit() *CommitRequest {
	if x, ok := m.GetMessage().(*PeerRequest_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *PeerRequest) GetBeacon() *BeaconRequest {
	if x, ok := m.GetMessage().(*PeerRequest_Beacon); ok {
		return x.Beacon
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PeerRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PeerRequest_OneofMarshaler, _PeerRequest_OneofUnmarshaler, _PeerRequest_OneofSizer, []interface{}{
		(*PeerRequest_Preaccept)(nil),
		(*PeerRequest_Accept)(nil),
		(*PeerRequest_Commit)(nil),
		(*PeerRequest_Beacon)(nil),
	}
}

func _PeerRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PeerRequest)
	// message
	switch x := m.Message.(type) {
	case *PeerRequest_Preaccept:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preaccept); err != nil {
			return err
		}
	case *PeerRequest_Accept:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Accept); err != nil {
			return err
		}
	case *PeerRequest_Commit:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *PeerRequest_Beacon:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Beacon); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PeerRequest.Message has unexpected type %T", x)
	}
	return nil
}

func _PeerRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PeerRequest)
	switch tag {
	case 11: // message.preaccept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreacceptRequest)
		err := b.DecodeMessage(msg)
		m.Message = &PeerRequest_Preaccept{msg}
		return true, err
	case 12: // message.accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AcceptRequest)
		err := b.DecodeMessage(msg)
		m.Message = &PeerRequest_Accept{msg}
		return true, err
	case 13: // message.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitRequest)
		err := b.DecodeMessage(msg)
		m.Message = &PeerRequest_Commit{msg}
		return true, err
	case 14: // message.beacon
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BeaconRequest)
		err := b.DecodeMessage(msg)
		m.Message = &PeerRequest_Beacon{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PeerRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PeerRequest)
	// message
	switch x := m.Message.(type) {
	case *PeerRequest_Preaccept:
		s := proto.Size(x.Preaccept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerRequest_Accept:
		s := proto.Size(x.Accept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerRequest_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerRequest_Beacon:
		s := proto.Size(x.Beacon)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A wrapper message that can contain one of the reply message types.
type PeerReply struct {
	Type    Type   `protobuf:"varint,1,opt,name=type,proto3,enum=pb.Type" json:"type,omitempty"`
	Sender  string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// only one of these fields can be set, and the field that is set should
	// match the message type described above.
	//
	// Types that are valid to be assigned to Message:
	//	*PeerReply_Preaccept
	//	*PeerReply_Accept
	//	*PeerReply_Commit
	//	*PeerReply_Beacon
	Message              isPeerReply_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PeerReply) Reset()         { *m = PeerReply{} }
func (m *PeerReply) String() string { return proto.CompactTextString(m) }
func (*PeerReply) ProtoMessage()    {}
func (*PeerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{1}
}

func (m *PeerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerReply.Unmarshal(m, b)
}
func (m *PeerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerReply.Marshal(b, m, deterministic)
}
func (m *PeerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerReply.Merge(m, src)
}
func (m *PeerReply) XXX_Size() int {
	return xxx_messageInfo_PeerReply.Size(m)
}
func (m *PeerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerReply.DiscardUnknown(m)
}

var xxx_messageInfo_PeerReply proto.InternalMessageInfo

func (m *PeerReply) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNKNOWN
}

func (m *PeerReply) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PeerReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isPeerReply_Message interface {
	isPeerReply_Message()
}

type PeerReply_Preaccept struct {
	Preaccept *PreacceptReply `protobuf:"bytes,11,opt,name=preaccept,proto3,oneof"`
}

type PeerReply_Accept struct {
	Accept *AcceptReply `protobuf:"bytes,12,opt,name=accept,proto3,oneof"`
}

type PeerReply_Commit struct {
	Commit *CommitReply `protobuf:"bytes,13,opt,name=commit,proto3,oneof"`
}

type PeerReply_Beacon struct {
	Beacon *BeaconReply `protobuf:"bytes,14,opt,name=beacon,proto3,oneof"`
}

func (*PeerReply_Preaccept) isPeerReply_Message() {}

func (*PeerReply_Accept) isPeerReply_Message() {}

func (*PeerReply_Commit) isPeerReply_Message() {}

func (*PeerReply_Beacon) isPeerReply_Message() {}

func (m *PeerReply) GetMessage() isPeerReply_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PeerReply) GetPreaccept() *PreacceptReply {
	if x, ok := m.GetMessage().(*PeerReply_Preaccept); ok {
		return x.Preaccept
	}
	return nil
}

func (m *PeerReply) GetAccept() *AcceptReply {
	if x, ok := m.GetMessage().(*PeerReply_Accept); ok {
		return x.Accept
	}
	return nil
}

func (m *PeerReply) GetCommit() *CommitReply {
	if x, ok := m.GetMessage().(*PeerReply_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *PeerReply) GetBeacon() *BeaconReply {
	if x, ok := m.GetMessage().(*PeerReply_Beacon); ok {
		return x.Beacon
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PeerReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PeerReply_OneofMarshaler, _PeerReply_OneofUnmarshaler, _PeerReply_OneofSizer, []interface{}{
		(*PeerReply_Preaccept)(nil),
		(*PeerReply_Accept)(nil),
		(*PeerReply_Commit)(nil),
		(*PeerReply_Beacon)(nil),
	}
}

func _PeerReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PeerReply)
	// message
	switch x := m.Message.(type) {
	case *PeerReply_Preaccept:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preaccept); err != nil {
			return err
		}
	case *PeerReply_Accept:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Accept); err != nil {
			return err
		}
	case *PeerReply_Commit:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *PeerReply_Beacon:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Beacon); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PeerReply.Message has unexpected type %T", x)
	}
	return nil
}

func _PeerReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PeerReply)
	switch tag {
	case 11: // message.preaccept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreacceptReply)
		err := b.DecodeMessage(msg)
		m.Message = &PeerReply_Preaccept{msg}
		return true, err
	case 12: // message.accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AcceptReply)
		err := b.DecodeMessage(msg)
		m.Message = &PeerReply_Accept{msg}
		return true, err
	case 13: // message.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitReply)
		err := b.DecodeMessage(msg)
		m.Message = &PeerReply_Commit{msg}
		return true, err
	case 14: // message.beacon
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BeaconReply)
		err := b.DecodeMessage(msg)
		m.Message = &PeerReply_Beacon{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PeerReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PeerReply)
	// message
	switch x := m.Message.(type) {
	case *PeerReply_Preaccept:
		s := proto.Size(x.Preaccept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerReply_Accept:
		s := proto.Size(x.Accept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerReply_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerReply_Beacon:
		s := proto.Size(x.Beacon)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("pb.Type", Type_name, Type_value)
	proto.RegisterType((*PeerRequest)(nil), "pb.PeerRequest")
	proto.RegisterType((*PeerReply)(nil), "pb.PeerReply")
}

func init() { proto.RegisterFile("peer.proto", fileDescriptor_055ae5a865fc1c9e) }

var fileDescriptor_055ae5a865fc1c9e = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x6a, 0x83, 0x40,
	0x14, 0x85, 0xa3, 0x09, 0x26, 0x5e, 0xf3, 0x63, 0x87, 0x52, 0x86, 0xd2, 0x85, 0x64, 0x65, 0x5a,
	0xc8, 0x22, 0xed, 0x0b, 0x24, 0x92, 0xd2, 0x52, 0x62, 0x44, 0x52, 0xba, 0xd6, 0xe9, 0xa5, 0x14,
	0x92, 0x38, 0x75, 0x0c, 0xd4, 0x67, 0xe8, 0x23, 0xf4, 0x65, 0xcb, 0xe8, 0x04, 0x8d, 0xd9, 0x75,
	0x77, 0xee, 0xe1, 0x3b, 0x82, 0x1f, 0x03, 0xc0, 0x11, 0xd3, 0x29, 0x4f, 0x93, 0x2c, 0x21, 0x3a,
	0x8f, 0xaf, 0xfb, 0xc8, 0xa3, 0xef, 0x44, 0x94, 0xcd, 0xf8, 0x47, 0x07, 0x2b, 0x40, 0x4c, 0x43,
	0xfc, 0x3a, 0xa0, 0xc8, 0xc8, 0x0d, 0x74, 0xb2, 0x9c, 0x23, 0xd5, 0x1c, 0xcd, 0x1d, 0xce, 0x7a,
	0x53, 0x1e, 0x4f, 0x37, 0x39, 0xc7, 0xb0, 0x68, 0xc9, 0x15, 0x18, 0x02, 0xf7, 0xef, 0x98, 0x52,
	0xdd, 0xd1, 0x5c, 0x33, 0x54, 0x17, 0x79, 0x00, 0x93, 0xa7, 0x18, 0x31, 0x86, 0x3c, 0xa3, 0x96,
	0xa3, 0xb9, 0xd6, 0xec, 0x52, 0x4e, 0x83, 0x63, 0xa9, 0x3e, 0xff, 0xd4, 0x0a, 0x2b, 0x90, 0xdc,
	0x81, 0xa1, 0x26, 0xfd, 0x62, 0x72, 0x21, 0x27, 0xf3, 0x06, 0x6f, 0x54, 0x30, 0x4b, 0x76, 0xbb,
	0xcf, 0x8c, 0x0e, 0x2a, 0xd8, 0x2b, 0x9a, 0x1a, 0x5c, 0x22, 0x12, 0x8e, 0x31, 0x62, 0xc9, 0x9e,
	0x0e, 0x2b, 0x78, 0x51, 0x34, 0x35, 0xb8, 0x44, 0x16, 0x26, 0x74, 0x77, 0x28, 0x44, 0xf4, 0x81,
	0xe3, 0x5f, 0x1d, 0xcc, 0xd2, 0x06, 0xdf, 0xe6, 0xff, 0x74, 0x41, 0xa1, 0x2b, 0x0e, 0x8c, 0xa1,
	0x10, 0xb4, 0xed, 0x68, 0x6e, 0x2f, 0x3c, 0x9e, 0x64, 0x76, 0x6e, 0x89, 0x34, 0x2c, 0xf1, 0x6d,
	0x7e, 0xea, 0x68, 0xd2, 0x70, 0x34, 0xaa, 0x3b, 0x2a, 0x69, 0xa3, 0x42, 0x4f, 0x0c, 0x8d, 0xea,
	0x86, 0x14, 0xaa, 0xfc, 0x4c, 0x1a, 0x7e, 0x46, 0x75, 0x3f, 0x0a, 0x3d, 0xb3, 0x73, 0xfb, 0x08,
	0x1d, 0xf9, 0xff, 0xc4, 0x82, 0xee, 0xab, 0xff, 0xe2, 0xaf, 0xdf, 0x7c, 0xbb, 0x45, 0x06, 0x60,
	0x06, 0xe1, 0x72, 0xee, 0x79, 0xcb, 0x60, 0x63, 0x6b, 0x04, 0xc0, 0x50, 0x59, 0x97, 0xd9, 0x5b,
	0xaf, 0x56, 0xcf, 0x1b, 0xbb, 0x2d, 0xf3, 0x62, 0x39, 0xf7, 0xd6, 0xbe, 0xdd, 0x89, 0x8d, 0xe2,
	0xe9, 0xdd, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x58, 0x60, 0x01, 0x63, 0x9a, 0x02, 0x00, 0x00,
}
