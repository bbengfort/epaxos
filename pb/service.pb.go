// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x81, 0x88, 0x48, 0x71, 0x15, 0xa4, 0xa6, 0x16, 0x41, 0xd8, 0x46,
	0x79, 0x5c, 0x6c, 0xae, 0x05, 0x89, 0x15, 0xf9, 0xc5, 0x42, 0x86, 0x5c, 0xec, 0x01, 0x45, 0xf9,
	0x05, 0xf9, 0xc5, 0xa9, 0x42, 0x42, 0x7a, 0x05, 0x49, 0x7a, 0x50, 0x4e, 0x50, 0x6a, 0x61, 0x69,
	0x6a, 0x71, 0x89, 0x94, 0x00, 0x8a, 0x58, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x90, 0x21, 0x17, 0xa7,
	0x73, 0x7e, 0x5e, 0x71, 0x6a, 0x5e, 0x71, 0x69, 0xb1, 0x10, 0x3f, 0x58, 0x41, 0x6a, 0x6a, 0x11,
	0x4c, 0x07, 0x2f, 0x42, 0x00, 0xac, 0x5c, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0x6c, 0xad, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x76, 0x4c, 0x9c, 0xa5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EpaxosClient is the client API for Epaxos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EpaxosClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error)
	Consensus(ctx context.Context, opts ...grpc.CallOption) (Epaxos_ConsensusClient, error)
}

type epaxosClient struct {
	cc *grpc.ClientConn
}

func NewEpaxosClient(cc *grpc.ClientConn) EpaxosClient {
	return &epaxosClient{cc}
}

func (c *epaxosClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error) {
	out := new(ProposeReply)
	err := c.cc.Invoke(ctx, "/pb.Epaxos/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epaxosClient) Consensus(ctx context.Context, opts ...grpc.CallOption) (Epaxos_ConsensusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Epaxos_serviceDesc.Streams[0], "/pb.Epaxos/Consensus", opts...)
	if err != nil {
		return nil, err
	}
	x := &epaxosConsensusClient{stream}
	return x, nil
}

type Epaxos_ConsensusClient interface {
	Send(*PeerRequest) error
	Recv() (*PeerReply, error)
	grpc.ClientStream
}

type epaxosConsensusClient struct {
	grpc.ClientStream
}

func (x *epaxosConsensusClient) Send(m *PeerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *epaxosConsensusClient) Recv() (*PeerReply, error) {
	m := new(PeerReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EpaxosServer is the server API for Epaxos service.
type EpaxosServer interface {
	Propose(context.Context, *ProposeRequest) (*ProposeReply, error)
	Consensus(Epaxos_ConsensusServer) error
}

func RegisterEpaxosServer(s *grpc.Server, srv EpaxosServer) {
	s.RegisterService(&_Epaxos_serviceDesc, srv)
}

func _Epaxos_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpaxosServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Epaxos/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpaxosServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Epaxos_Consensus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EpaxosServer).Consensus(&epaxosConsensusServer{stream})
}

type Epaxos_ConsensusServer interface {
	Send(*PeerReply) error
	Recv() (*PeerRequest, error)
	grpc.ServerStream
}

type epaxosConsensusServer struct {
	grpc.ServerStream
}

func (x *epaxosConsensusServer) Send(m *PeerReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *epaxosConsensusServer) Recv() (*PeerRequest, error) {
	m := new(PeerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Epaxos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Epaxos",
	HandlerType: (*EpaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Epaxos_Propose_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consensus",
			Handler:       _Epaxos_Consensus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
